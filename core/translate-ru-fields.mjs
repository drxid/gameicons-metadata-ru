import fs from 'fs/promises';
import fetch from 'node-fetch';

const API_KEY = '<API_KEY>';
const API_URL = 'https://translate.api.cloud.yandex.net/translate/v2/translate';

const INPUT_FILE = 'output.json';
const OUTPUT_FILE = 'translated_output.json';
const CACHE_FILE = 'core/translation-cache.json';

// üëâ –í–ö–õ/–í–´–ö–õ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ (Capitalize first, lowercase rest)
const USE_CAPITALIZATION = true;

let cache = new Map();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫—ç—à –∏–∑ —Ñ–∞–π–ª–∞
async function loadCache() {
  try {
    const raw = await fs.readFile(CACHE_FILE, 'utf-8');
    const obj = JSON.parse(raw);
    cache = new Map(Object.entries(obj));
    console.log(`üîÅ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: ${cache.size} –∑–∞–ø–∏—Å–µ–π`);
  } catch {
    console.log('üì≠ –ö—ç—à –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∑–∞–Ω–æ–≤–æ.');
    cache = new Map();
  }
}

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—ç—à –≤ —Ñ–∞–π–ª
async function saveCache() {
  const obj = Object.fromEntries(cache.entries());
  await fs.writeFile(CACHE_FILE, JSON.stringify(obj, null, 2), 'utf-8');
  console.log(`üíæ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ ${CACHE_FILE}`);
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
function formatTranslation(str) {
  if (!USE_CAPITALIZATION) return str;
  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();
}

// –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞
async function translateText(text) {
  if (cache.has(text)) {
    return cache.get(text);
  }

  const response = await fetch(API_URL, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Api-Key ${API_KEY}`,
    },
    body: JSON.stringify({
      texts: [text],
      targetLanguageCode: 'ru',
    }),
  });

  const result = await response.json();

  if (result.translations?.[0]?.text) {
    const translated = formatTranslation(result.translations[0].text);
    cache.set(text, translated);
    return translated;
  }

  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:', result);
  return text; // fallback
}

async function main() {
  await loadCache();

  const raw = await fs.readFile(INPUT_FILE, 'utf-8');
  const data = JSON.parse(raw);

  for (const obj of data) {
    // Title
    if (obj.title?.en && obj.title.en === obj.title.ru) {
      const translated = await translateText(obj.title.en);
      obj.title.ru = translated;
      console.log(`üî§ Title: "${obj.title.en}" ‚Üí "${translated}"`);
    }

    // Category
    if (obj.category?.en && obj.category.en === obj.category.ru) {
      const translated = await translateText(obj.category.en);
      obj.category.ru = translated;
      console.log(`üìÅ Category: "${obj.category.en}" ‚Üí "${translated}"`);
    }

    // Tags
    if (Array.isArray(obj.tags?.en) && Array.isArray(obj.tags?.ru)) {
      for (let i = 0; i < obj.tags.en.length; i++) {
        const tagEn = obj.tags.en[i];
        const tagRu = obj.tags.ru[i];
        if (tagEn === tagRu) {
          const translated = await translateText(tagEn);
          obj.tags.ru[i] = translated;
          console.log(`üè∑Ô∏è Tag: "${tagEn}" ‚Üí "${translated}"`);
        }
      }
    }
  }

  await fs.writeFile(OUTPUT_FILE, JSON.stringify(data, null, 2), 'utf-8');
  console.log(`‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à—ë–Ω. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${OUTPUT_FILE}`);

  await saveCache();
}

main();
